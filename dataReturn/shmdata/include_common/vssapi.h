#ifndef _VSS_API_H_
#define _VSS_API_H_


/*---functions---*/
#ifdef __cplusplus
extern "C" {
#endif

#include "vsstype.h"


enum ALG_TYPE {
	ALG_GJ = 1,	
	ALG_GM,
};

enum ENV_TYPE {
	ENV_QA = 1,
	ENV_PP,
	ENV_P,
};

enum{
	CERT_TYPE_ROOT = 0,
	CERT_TYPE_USR,
};

#define ROOT_CERT_SIZE  144
#define USER_CERT_SIZE  176
#define ECU_CERT_SIZE   164

enum CERT_TYPE {
  CERTTYPE_ROOT    = 0x10,
  CERTTYPE_ECU     = 0x20,
  CERTTYPE_USR     = 0x30,
  CERTTYPE_USRREQ  = 0x31,
};

#define INNER_KEY_MODE 0
#define OUTER_KEY_MODE 1
#define CALC_ENC 0
#define CALC_DEC 1
#define PAD_NO_FORCE 0
#define PAD_FORCE 1
#define HASH_NO_CALC 0
#define HASH_CALC 1


/******************************************************************************
摘要: 算法库初始化，通过读取FLASH指定的算法来初始化系统算法标识，默认算法为国密算法
   需要通过该方法将FLASH读写的接口指针注册到VSS中，VSS可以通过该接口读写FLASH中指定的密钥存储区域。
   由于非对称算法的运算时间较长（例如完整软算法验签可能需要500ms），这就需要算法内部运算时分段复位WDT的时钟，否则会导致MCU复位。

参数: type[in]    --指定算法库的运算类型：0-软算法；1-M300芯片
	group[in]  --预留参数，椭圆曲率ID：0-NIST prime256v1; 1-brainpoolP256r1
           目前只支持0-NIST prime256v1曲率
     flashCb[in]  --读写FLASH密钥存储区域的回调函数指针，如不需使用，传入空指针即可
     wdtCb[in]   --复位看门狗计时器的回调函数指针，如不需使用，传入空指针即可

返回值：0       --成功
        0x04    --运算类型不是指定的数值
        0x1C    --读缓存数据失败
******************************************************************************/
UINT32 VssCryptoInit(UINT32 type, UINT32 group, flash_io_cb* flashCb, wdt_rst_cb* wdtCb);

/******************************************************************************
摘要: 随机生成SM2非对称密钥对并导出接口

参数: szX[out]      --公钥X（定长32字节）
      szY[out]      --公钥Y（定长32字节）
      szSK[out]     --私钥SK（定长32字节）

返回值：0       --成功
        0x04    --传入空指针
        0x08    --计算失败
        0x18    --算法不支持
******************************************************************************/
UINT32 VssSM2GenKey(UINT8 *szX, UINT8*szY, UINT8 *szSK);

/******************************************************************************
摘要: 随机生成SM2非对称密钥对并存储接口

参数: szX[out]      --公钥X（定长32字节）
      szY[out]      --公钥Y（定长32字节）

返回值：0       --成功
        0x04    --szX或szY传入空指针
        0x08    --计算失败
        0x1B    --未调用算法库初始化接口或未指定IO操作回调方法
        0x1D    --写缓存数据失败
******************************************************************************/
UINT32 VssSM2GenKeyIndex(UINT8 *szX, UINT8 *szY);

/******************************************************************************
摘要: 以输入的车辆安全码作为种子，根据配置文件产生系列的对称密钥

参数: len[in]     --车辆安全码长度，固定32
     code[in]    --车辆安全码，固定32字节，由第32字节指定算法，当该数为偶数时指定为国密算法，为奇数时指定为国际算法（即alg=code[31]&1; 0-国密，1-国际）
     szKeyIdList[out] --生成成功的密钥ID清单，例如“1,2,5”
     AutoSetWroteFlag[in] -设1在功能完成后自动置wrote Flag为1；设0不做任何操作

返回值：0       --成功
        0x04    --传入空指针
        0x12    --安全码长度不为32
        0x1B    --未调用算法库初始化接口或未指定IO操作回调方法
        0x1D    --写缓存数据失败
        0x21    --码单已经被生成过
******************************************************************************/
UINT32 VssGenerateKeyByCode(UINT32 len, UINT8* code, CHAR8* szKeyIdList, UINT8 AutoSetWroteFlag);

/******************************************************************************
摘要: 随机生成ECC非对称密钥对并导出接口

参数: szX[out]      --公钥X（定长32字节）
      szY[out]      --公钥Y（定长32字节）
      szSK[out]     --私钥SK（定长32字节）

返回值：0       --成功
        0x04    --传入空指针
        0x08    --计算失败
        0x18    --算法不支持
******************************************************************************/
UINT32 VssECCGenKey(UINT8 *szX, UINT8 *szY, UINT8 *szSK);

/******************************************************************************
摘要: 随机生成ECC非对称密钥对并存储接口

参数: szX[out]      --公钥X（定长32字节）
      szY[out]      --公钥Y（定长32字节）

返回值：0       --成功
        0x04    --szX或szY传入空指针
        0x08    --计算失败
        0x1B    --未调用算法库初始化接口或未指定IO操作回调方法
        0x1D    --写缓存数据失败
******************************************************************************/
UINT32 VssECCGenKeyIndex(UINT8 *szX, UINT8 *szY);

/********************************************************************************
摘要: 证书导入

参数:nCertType[in]    --证书类型: 0:根证书;1:身份证书
	nLen[in]         --证书长度
	szCert[in]        --证书数据

返回值：0         --成功
        0x04      --传入空指针或证书类型不为0-1
        0x12      --证书长度非法，根证书144，身份证书176
        0x1B      --未调用算法库初始化接口或未指定IO操作回调方法       
        0x1D      --写缓存数据失败
********************************************************************************/
UINT32 VssCertImport(UINT32 nCertType, UINT32 nLen, UINT8* szCert);

/********************************************************************************
摘要: 证书读取
参数: nCertType[in]    --证书类型: 0:根证书;1:身份证书
nCertLen[out]    --导出证书长度
szCert[out]      --导出证书数据
	info[out]         --输出16字节指定信息格式
                     证书类型  4B
                     有效日期  4B 格式为YYMMDD
                     证书序号  4B
                     证书属性  4B [算法，根索引，预留，预留]
                               算法：0-国密；1-国际
                               根索引：    0x10-
                                       0x11-测试国际根
                                       0x20-预生产国密根
                                       0x21-预生产国际根
                                       0x40-生产国密根
                                       0x41-生产国际根

返回值：0         --成功
        0x04      --传入空指针或证书类型不为0-1
        0x0E      --证书不存在
        0x1B      --未调用算法库初始化接口或未指定IO操作回调方法       
        0x1C      --读缓存数据失败
********************************************************************************/
UINT32 VssCertExport(UINT32 nCertType, UINT32* nCertLen, UINT8* szCert, UINT8* info);

/******************************************************************************
摘要: 导入明文会话密钥

参数:nKeylen[in]  --密钥的长度，定长16
    szKey[in]    --密钥值

返回值：0       --成功
        0x04    --密钥为空指针
        0x19    --密钥长度不为16
        0x1B    --未调用算法库初始化接口或未指定IO操作回调方法
        0x1D    --写缓存数据失败
******************************************************************************/
UINT32 VssImportSessKey(UINT32 nKeyLen, UINT8* szKey);

/******************************************************************************
摘要: 读取会话密钥明文

参数: index[in]    --密钥存储的索引号，0-当前通信密钥，1-备份通信密钥
    nKeylen[out]  --密钥的长度
    szKey[out]    --密钥值

返回值：0       --成功
        0x04    --密钥长度或密钥值为空指针
        0x05    --指定密钥不存在
        0x0F    --密钥索引号非法，不为0-1
        0x1B    --未调用算法库初始化接口或未指定IO操作回调方法
        0x1C    --读缓存数据失败       
******************************************************************************/
UINT32 VssExportSessKey(UINT32 index, UINT32* nKeyLen,UINT8* szKey);

/******************************************************************************
摘要: 修改密钥的激活属性

参数: keyId[in]   --密钥ID（只针对5-8号通信密钥有效）
     valid[in]    --可用标识: 0-不可用；1-可用

返回值：0       --成功
        0x04    --可用标识不是指定值
        0x05    --密钥不存在
        0x0F    --密钥ID非法，不为5-8
        0x1B    --未调用算法库初始化接口或未指定IO操作回调方法
        0x1D    --写缓存数据失败
******************************************************************************/
UINT32 VssSetKeyActive(UINT32 keyId, UINT32 valid);

/******************************************************************************
摘要: 读取防盗密钥明文，防盗密钥至多仅一条有效，如果存在防盗密钥返回对应密钥，如果不存在返回05--密钥不可用

参数: index[in]    --密钥索引，有效索引为0-3
    nKeyLen[out]  --密钥的长度
    szKey[out]    --密钥值

返回值：0        --成功
        0x04     --密钥或密钥长度传入空指针
        0x05     --指定密钥不存在
        0x1B      --未调用算法库初始化接口或未指定IO操作回调方法
        0x1C      --读缓存数据失败
        0x23     --码单未生成
******************************************************************************/
UINT32 VssExportAtKey(UINT32 index, UINT32* nKeyLen, UINT8* szKey);

/******************************************************************************
摘要: 读取防盗PIN明文

参数: nPinLen[out]  --PIN的长度
    szPin[out]    --PIN值

返回值：0        --成功
        0x04     --传入空指针
        0x05     --指定密钥不存在
        0x1B      --未调用算法库初始化接口或未指定IO操作回调方法
        0x1C      --读缓存数据失败
        0x23     --码单未生成
******************************************************************************/
UINT32 VssExportAtPin(UINT32* nPinLen, UINT8* szPin);

/******************************************************************************
摘要: 反馈车辆安全码输入情况

参数: szFeedback[out]    --车辆安全码反馈值，定长32字节
                        如果32字节车辆安全码没给安全算法包输入过，该接口吐出值为全FF
			     如果32字节车辆安全码已经输入安全算法包，该接口吐出值为全00

返回值：0        --成功
        0x04     --传入空指针
        0x1B      --未调用算法库初始化接口或未指定IO操作回调方法
        0x1C      --读缓存数据失败
******************************************************************************/
UINT32 VssKeyCodeFeedback(UINT8* szFeedback);

/******************************************************************************
摘要: 根据输入的码单的最后一位来判断国密/国际算法标识，本接口返回算法标识
      如果车辆安全码未输入，则返回”2-国密算法”

参数: nAlgFlag[out]    --算法标识: 1-国际算法；2-国密算法
                     
返回值：0        --成功
        0x04     --传入空指针
        0x1B      --未调用算法库初始化接口或未指定IO操作回调方法
        0x1C      --读缓存数据失败
******************************************************************************/
UINT32 VssGetAlgFlag(UINT32* nAlgFlag);

/******************************************************************************
摘要: ECC非对称加解密接口

参数: szInData[in]      --输入数据
      nInLen[in]       --输入数据长度，加密最大64字节， 解密固定192字节
      calcFlag[in]      --运算标识: 0-加密；1-解密  
      szKey[in]        --运算密钥：如果是加密运算，该值为加密X||加密Y;
	      	  	  	  	  	 如果是解密运算，该值为解密SK
      nKeyLen[in]       --运算密钥长度，加密为64，解密为32
      szOutData[out]    --输出运算结果
      pOutLen[out]      --输出结果长度

返回值：0         --成功
        0x04      --传入空指针
        0x08      --计算错误
        0x12      --数据长度非法
        0x18      --算法不支持
        0x19      --密钥长度非法
        0x1B      --未调用算法库初始化接口
******************************************************************************/
UINT32 VssECCCalc(UINT8* szInData, UINT32 nInLen, UINT32 calcFlag, UINT8 *szKey, UINT32 nKeyLen, UINT8 *szOutData, UINT32* pOutLen);

/******************************************************************************
摘要: ECC非对称加解密接口

参数: szInData[in]      --输入数据
      nInLen[in]       --输入数据长度，加密最大64字节， 解密固定192字节
      calcFlag[in]      --运算标识: 0-加密；1-解密  
      szOutData[out]    --输出运算结果
      pOutLen[out]      --输出结果长度

返回值：0         --成功
        0x04      --传入空指针
        0x05      --密钥不存在
        0x08      --计算错误
        0x0B      --运算标识不为指定值
        0x12      --数据长度非法
        0x18      --算法不支持
        0x1B      --未调用算法库初始化接口或未指定IO操作回调方法       
        0x1C      --读缓存数据失败
******************************************************************************/
UINT32 VssECCCalcIndex(UINT8* szInData, UINT32 nInLen, UINT32 calcFlag, UINT8 *szOutData, UINT32* pOutLen);

/******************************************************************************
摘要: ECC数据签名

参数: key[in]              --签名私钥，定长32字节
     data[in]             --运算数据
     dataLen[in]          --运算数据长度，不哈希直接签名时指定32，哈希签名时数据长度大于0
hashFlag[in]          --哈希标识: 0-不哈希直接签名; 1-先SHA256再签名
     sig[out]             --签名结果，定长64字节

返回值：0         --成功
        0x04      --传入空指针或哈希标识非法
        0x08      --计算错误
        0x12      --数据长度非法
        0x18      --算法不支持
******************************************************************************/
UINT32 VssECCSign(UINT8* key, UINT8* data, UINT32 dataLen, UINT8 hashFlag, UINT8* sig);

/******************************************************************************
摘要: ECC数据签名

参数: data[in]             --运算数据
     dataLen[in]          --运算数据长度，不哈希直接签名时指定32，哈希签名时数据长度大于0
     hashFlag[in]         --哈希标识: 0-不哈希直接签名; 1-先SHA256再签名
     sig[out]             --签名结果，定长64字节

返回值：0         --成功
        0x04      --传入空指针或哈希标识非法
        0x05      --密钥不存在
        0x08      --计算错误
        0x18      --算法不支持
        0x12      --数据长度非法
        0x1B      --未调用算法库初始化接口或未指定IO操作回调方法       
        0x1C      --读缓存数据失败
******************************************************************************/
UINT32 VssECCSignIndex(UINT8* data, UINT32 dataLen, UINT8 hashFlag, UINT8* sig);

/******************************************************************************
摘要: ECC验证签名

参数: pk[in]              --验证签名公钥，定长64字节
     data[in]             --运算数据
     dataLen[in]          --运算数据长度，不哈希直接签名时指定32，哈希签名时数据长度大于0
     hashFlag[in]         --哈希标识: 0-不哈希直接签名; 1-先SHA256再签名
     sig[in]              --签名结果，定长64字节

返回值：0         --成功
        0x04      --传入空指针或哈希标识非法
        0x08      --验签失败
        0x12      --数据长度非法
        0x18      --算法不支持
******************************************************************************/
UINT32 VssECCVerify(UINT8* pk, UINT8* data, UINT32 dataLen, UINT8 hashFlag, UINT8* sig);

/******************************************************************************
摘要: AES对称运算

参数: in[in]         --待运算数据
     inLen[in]      --待运算数据长度
     key[in]        --密钥
      keyLen[in]    --密钥长度，定长16
      calcFlag[in]   --加解密标识：0-加密；1-解密
      padding[in]   --补位标识：0-不强制补位；1-强制补位
      out[out]      --加密后数据
      pOutLen[out]  --加密后数据长度

返回值：0         --成功
        0x04      --传入空指针或加解密标识、补位标识非法
        0x19      --密钥长度非法
        0x18      --算法不支持
******************************************************************************/
UINT32 VssAESCalc(UINT8* in, UINT32 inLen, UINT8 *key, UINT32 keyLen, UINT32 calcFlag, UINT32 padding, UINT8* out, UINT32* pOutLen);

/******************************************************************************
摘要: AES对称运算

参数: index[in]     --密钥索引，指定0-13
in[in]         --待运算数据
      inLen[in]      --待运算数据长度
      calcFlag[in]   --加解密标识：0-加密；1-解密
      padding[in]   --补位标识：0-不强制补位；1-强制补位
      out[out]      --加密后数据
      pOutLen[out]  --加密后数据长度

返回值：0         --成功
        0x04      --传入空指针或加解密标识、补位标识非法
        0x05      --密钥不存在
        0x0F      --密钥索引非法，不为0-13
        0x18      --算法不支持
        0x1B      --未调用算法库初始化接口或未指定IO操作回调方法       
        0x1C      --读缓存数据失败
******************************************************************************/
UINT32 VssAESCalcIndex(UINT32 index, UINT8* in, UINT32 inLen, UINT32 calcFlag, UINT32 padding, UINT8* out, UINT32* pOutLen);


/******************************************************************************
摘要: AES计算MAC

参数: in[in]         --待运算数据
      inLen[in]      --待运算数据长度
      key[in]      --密钥
      keyLen[in]   --密钥长度，定长16
      out[out]      --mac结果，定长16字节

返回值：0         --成功
        0x04      --传入空指针
        0x18      --算法不支持
        0x19      --密钥长度不为16
******************************************************************************/
UINT32 VssAESMac(UINT8* in, UINT32 inLen, UINT8 *key, UINT32 keyLen, UINT8* out);

/******************************************************************************
摘要: AES计算CMAC

参数: in[in]         --待运算数据
      inLen[in]      --待运算数据长度
      key[in]      --密钥
      keyLen[in]   --密钥长度，定长16
      out[out]      --mac结果，定长16字节

返回值：0         --成功
        0x04      --传入空指针
        0x18      --算法不支持
        0x19      --密钥长度不为16
******************************************************************************/
UINT32 VssAESCMac(UINT8* in, UINT32 inLen, UINT8 *key, UINT32 keyLen, UINT8* out);

/******************************************************************************
摘要: AES计算CMAC，使用内部密钥

参数: in[in]         --待运算数据
     inLen[in]      --待运算数据长度
     index[in]      --密钥索引，指定0-13
      out[out]      --mac结果，定长16字节

返回值：0         --成功
        0x04      --传入空指针
        0x05      --指定密钥不存在
        0x0F      --密钥索引非法，不为0-13
        0x18      --算法不支持
******************************************************************************/
UINT32 VssAESCMacIndex(UINT8* in, UINT32 inLen, UINT32 index, UINT8* out);

/******************************************************************************
摘要: ZUC密钥初始化，适用于运算数据定长8字节

参数: key[in]	     --密钥，定长16字节
     zuc_key[out]	--ZUC运算时密钥

返回值：0         --成功
        0x04      --传入空指针
        0x18      --算法不支持
******************************************************************************/
UINT32 VssZucSetKey(UINT8* key, TZucKey* zuc_key);

/******************************************************************************
摘要: ZUC运算，该接口适用于定长8字节数据

参数: zuc_key[in]	--转码后的密钥
in[in]	     --待运算数据，定长8字节     
      out[out]	     --结果数据，定长8字节

返回值：0         --成功
        0x04      --传入空指针
        0x18      --算法不支持
******************************************************************************/
UINT32 VssZucCalc(TZucKey* zuc_key, UINT8* in, UINT8* out);

/******************************************************************************
摘要: SM4对称运算

参数: in[in]         --待运算数据
      inLen[in]      --待运算数据长度
      key[in]       --密钥
      keyLen[in]    --密钥长度，定长16
      calcFlag[in]   --加解密标识：0-加密；1-解密
      padding[in]   --补位标识：0-不强制补位；1-强制补位
      out[out]      --加密后数据
      pOutLen[out]  --加密后数据长度

返回值：0         --成功
        0x04      --传入空指针或加解密标识、补位标识非法
        0x19      --密钥长度非法
        0x18      --算法不支持
******************************************************************************/
UINT32 VssSM4Calc(UINT8* in, UINT32 inLen, UINT8 *key, UINT32 keyLen, UINT32 calcFlag, UINT32 padding, UINT8* out, UINT32* pOutLen);

/******************************************************************************
摘要: SM4对称运算

参数: index[in]     --密钥索引，指定0-13
in[in]         --待运算数据
      inLen[in]      --待运算数据长度
      calcFlag[in]   --加解密标识：0-加密；1-解密
      padding[in]   --补位标识：0-不强制补位；1-强制补位
      out[out]      --加密后数据
      pOutLen[out]  --加密后数据长度

返回值：0         --成功
        0x04      --传入空指针或加解密标识、补位标识非法
        0x05      --密钥不存在
        0x0F      --密钥索引非法，不为0-13
        0x18      --算法不支持
        0x1B      --未调用算法库初始化接口或未指定IO操作回调方法       
        0x1C      --读缓存数据失败
******************************************************************************/
UINT32 VssSM4CalcIndex(UINT32 index, UINT8* in, UINT32 inLen, UINT32 calcFlag, UINT32 padding, UINT8* out, UINT32* pOutLen);

/******************************************************************************
摘要: ZUC对称运算

参数: in[in]         --待运算数据
      inLen[in]      --待运算数据长度，大于0且为8的整数倍
      key[in]      --密钥，定长16字节
      out[out]      --运算后数据，长度=输入数据长度

返回值：0         --成功
        0x04      --传入空指针
        0x12      --数据长度非法
        0x18      --算法不支持
******************************************************************************/
UINT32 VssZucCalcData(UINT8* in, UINT32 inLen, UINT8* key, UINT8* out);

/******************************************************************************
摘要: SM4计算MAC

参数: in[in]         --待运算数据
      inLen[in]      --待运算数据长度
      key[in]      --密钥
      keyLen[in]   --密钥长度，定长16
      out[out]      --mac结果，定长16字节

返回值：0         --成功
        0x04      --传入空指针
        0x18      --算法不支持
        0x19      --密钥长度不为16
******************************************************************************/
UINT32 VssSM4Mac(UINT8* in, UINT32 inLen, UINT8 *key, UINT32 keyLen, UINT8* out);

/******************************************************************************
摘要: SM4计算CMAC

参数: in[in]         --待运算数据
      inLen[in]      --待运算数据长度
      key[in]      --密钥
      keyLen[in]   --密钥长度，定长16
      out[out]      --mac结果，定长16字节

返回值：0         --成功
        0x04      --传入空指针
        0x18      --算法不支持
        0x19      --密钥长度不为16
******************************************************************************/
UINT32 VssSM4CMac(UINT8* in, UINT32 inLen, UINT8 *key, UINT32 keyLen, UINT8* out);

/******************************************************************************
摘要: SM4计算CMAC，使用内部密钥

参数: in[in]         --待运算数据
     inLen[in]      --待运算数据长度
     index[in]      --密钥索引，指定0-13
      out[out]      --mac结果，定长16字节

返回值：0         --成功
        0x04      --传入空指针
        0x05      --指定密钥不存在
        0x0F      --密钥索引非法，不为0-13
        0x18      --算法不支持
******************************************************************************/
UINT32 VssSM4CMacIndex(UINT8* in, UINT32 inLen, UINT32 index, UINT8* out);

/******************************************************************************
摘要: 产生随机数

参数: len[in]        --随机数长度
      out[out]      --随机数缓存

返回值：0         --成功
        0x04      --传入空指针
        0x12      --指定长度等于0
******************************************************************************/
UINT32 VssGenRandom(UINT32 len, UINT8* out);

/******************************************************************************
摘要: HASH计算，通过算法库初始化接口自适应算法

参数: data[in]             --运算数据
      dataLen[in]          --运算数据长度
      out[out]             --HASH结果
      pOutLen[out]       --结果长度，定长32字节

返回值：0         --成功
        0x04      --传入空指针
        0x12      --指定长度等于0
        0x18      --算法不支持
******************************************************************************/
UINT32 VssHash(UINT8* data, UINT32 dataLen, UINT8* out, UINT32* pOutLen);

/******************************************************************************
摘要: HASH计算初始化，通过算法库初始化接口自适应算法

参数: ctx[in]    --上下文环境

返回值：0         --成功
        0x04      --传入空指针
        0x18      --算法不支持
******************************************************************************/
UINT32 VssHashInit(THashCtx* ctx);

/******************************************************************************
摘要: HASH计算数据更新，通过算法库初始化接口自适应算法

参数:  ctx[in]              --上下文环境
      data[in]             --运算数据
      dataLen[in]          --运算数据长度

返回值：0         --成功
        0x04      --传入空指针
        0x18      --算法不支持
******************************************************************************/
UINT32 VssHashUpdate(THashCtx* ctx, UINT8* data, UINT32 dataLen);

/******************************************************************************
摘要: HASH计算结束，通过算法库初始化接口自适应算法

参数: ctx[in]               --上下文环境
      out[out]             --HASH结果
      pOutLen[out]        --结果长度

返回值：0         --成功
        0x04      --传入空指针
        0x18      --算法不支持
******************************************************************************/
UINT32 VssHashFinal(THashCtx* ctx, UINT8* out, UINT32* pOutLen);

/******************************************************************************
摘要: HMAC计算，通过算法库初始化接口自适应算法

参数: key[in]             --密钥
     keyLen[in]          --密钥长度
     data[in]             --运算数据
     dataLen[in]          --运算数据长度
     out[out]             --HMAC结果
      pOutLen[out]       --结果长度

返回值：0         --成功
        0x04      --传入空指针
        0x12      --指定长度等于0
        0x18      --算法不支持
        0x19      --密钥长度为0
******************************************************************************/
UINT32 VssHMAC(UINT8* key, UINT32 keyLen, UINT8* data, UINT32 dataLen, UINT8* out, UINT32* pOutLen);

/******************************************************************************
摘要: SM2非对称加解密接口

参数: szInData[in]      --输入数据
      nInLen[in]        --输入数据长度，加密时1-64字节， 解密时97-160字节
      calcFlag[in]      --运算标识: 0-加密；1-解密  
      szKey[in]         --运算密钥：如果是加密运算，该值为加密X||加密Y;
	      	  	  	  	  	 如果是解密运算，该值为解密SK
      nKeyLen[in]       --运算密钥长度，加密为64，解密为32
      szOutData[out]    --输出运算结果
      pOutLen[out]      --输出结果长度

返回值：0         --成功
        0x04      --传入空指针
        0x08      --计算错误
        0x12      --数据长度非法
        0x18      --算法不支持
        0x19      --密钥长度非法
        0x1B      --未调用算法库初始化接口
******************************************************************************/
UINT32 VssSM2Calc(UINT8* szInData, UINT32 nInLen, UINT32 calcFlag, UINT8 *szKey, UINT32 nKeyLen, UINT8 *szOutData, UINT32* pOutLen);

/******************************************************************************
摘要: SM2非对称加解密接口

参数: szInData[in]      --输入数据
      nInLen[in]        --输入数据长度，加密时1-64字节， 解密时97-160字节
      calcFlag[in]       --运算标识: 0-加密；1-解密  
      szOutData[out]    --输出运算结果
      pOutLen[out]      --输出结果长度

返回值：0         --成功
        0x04      --传入空指针
        0x05      --密钥不存在
        0x08      --计算错误
        0x0B      --运算标识不为指定值
        0x12      --数据长度非法
        0x18      --算法不支持
        0x1B      --未调用算法库初始化接口或未指定IO操作回调方法       
        0x1C      --读缓存数据失败
******************************************************************************/
UINT32 VssSM2CalcIndex(UINT8* szInData, UINT32 nInLen, UINT32 calcFlag, UINT8 *szOutData, UINT32* pOutLen);

/******************************************************************************
摘要: SM2数据签名

参数: sk[in]              --签名私钥，定长32字节
     data[in]             --运算数据
     dataLen[in]          --运算数据长度，不哈希直接签名时指定32，哈希签名时数据长度大于0
     hashFlag[in]         --哈希标识: 0-不哈希直接签名; 1-先SM3再签名
     sig[out]             --签名结果，定长64字节

返回值：0         --成功
        0x04      --传入空指针或哈希标识非法
        0x08      --计算错误
        0x12      --数据长度非法
        0x18      --算法不支持
******************************************************************************/
UINT32 VssSM2Sign(UINT8* sk, UINT8* data, UINT32 dataLen, UINT8 hashFlag, UINT8* sig);

/******************************************************************************
摘要: SM2数据签名

参数: data[in]             --运算数据
     dataLen[in]          --运算数据长度，不哈希直接签名时指定32，哈希签名时数据长度大于0
     hashFlag[in]         --哈希标识: 0-不哈希直接签名; 1-先SM3再签名
     sig[out]             --签名结果，定长64字节

返回值：0         --成功
        0x04      --传入空指针或哈希标识非法
        0x05      --密钥不存在
        0x08      --计算错误
        0x12      --数据长度非法
        0x18      --算法不支持
        0x1B      --未调用算法库初始化接口或未指定IO操作回调方法       
        0x1C      --读缓存数据失败
******************************************************************************/
UINT32 VssSM2SignIndex(UINT8* data, UINT32 dataLen, UINT8 hashFlag, UINT8* sig);

/******************************************************************************
摘要: SM2验证签名

参数: pk[in]              --验证签名公钥，定长64字节
     data[in]             --运算数据
     dataLen[in]          --运算数据长度，不哈希直接签名时指定32，哈希签名时数据长度大于0
     hashFlag[in]         --哈希标识: 0-不哈希直接签名; 1-先SM3再签名
     sig[in]              --签名结果，定长64字节

返回值：0         --成功
        0x04      --传入空指针或哈希标识非法
        0x08      --验签失败
        0x12      --数据长度非法
        0x18      --算法不支持
******************************************************************************/
UINT32 VssSM2Verify(UINT8* pk, UINT8* data, UINT32 dataLen, UINT8 hashFlag, UINT8* sig);

/******************************************************************************
摘要: 读取证书信息，支持根证书和身份证书读取信息

参数: cert[in]          --证书数据
     certLen[in]       --证书长度
	info[out]         --输出16字节指定信息格式
                     证书类型  4B
                     有效日期  4B 格式为YYMMDD
                     证书序号  4B
                     证书属性  4B [算法，根索引，预留，预留]
                               算法：0-国密；1-国际
                               根索引：0x10-测试国密根
                                       0x11-测试国际根
                                       0x20-预生产国密根
                                       0x21-预生产国际根
                                       0x30-生产国密根
                                       0x31-生产国际根

返回值：0         --成功
        0x04      --传入空指针
        0x12      --证书长度非法
	 0x1A      --证书格式非法
        0x18      --算法不支持
        0x1B      --未调用算法库初始化接口
******************************************************************************/
UINT32 VssGetCertInfo(UINT8* cert, UINT32 certLen, UINT8* info);

/******************************************************************************
摘要: 证书公钥加密

参数: in[in]         --待加密数据
      inLen[in]      --待加密数据长度， 最大64字节
      cert[in]       --证书
      certLen[in]    --证书长度
      out[out]       --加密后数据
      pOutLen[out]  --加密后数据长度

返回值：0         --成功
        0x04      --传入空指针
        0x08      --计算错误
        0x0B      --不是正确的证书数据
	 0x12      --待加密数据长度超过64
	 0x1A      --证书格式非法
        0x18      --算法不支持
        0x1B      --未调用算法库初始化接口
******************************************************************************/
UINT32 VssCertPkEnc(UINT8* in, UINT32 inLen, UINT8 *cert, UINT32 certLen, UINT8* out, UINT32* pOutLen);

/******************************************************************************
摘要: 证书合法性验证

参数: cert[in]              --待验证证书
      len[in]              --待验证证书长度

返回值：0         --成功
        0x04      --传入空指针
        0x08      --证书签名校验失败
	 0x1A      --证书格式非法
        0x18      --算法不支持
        0x1B      --未调用算法库初始化接口或未指定IO操作回调方法       
        0x1C      --读缓存数据失败
******************************************************************************/
UINT32 VssVerifyCert(UINT8* cert, UINT32 len);

/******************************************************************************
摘要: 验证证书有效期

参数: cert[in]              --待验证证书
      len[in]              --待验证证书长度
      szDataNow[in]       --当前日期”YYYYMMDD”格式的字符串

返回值：0         --证书校验通过，有效期在当前日期之前，已过期
        1         --证书校验通过，且未过期
        0x04      --传入空指针
        0x08      --证书签名校验失败
	 0x1A      --证书格式非法
        0x18      --算法不支持
        0x1A      --证书过期
        0x1B      --未调用算法库初始化接口或未指定IO操作回调方法       
        0x1C      --读缓存数据失败
******************************************************************************/
UINT32 VssVerifyCertValid(UINT8* cert, UINT32 len, CHAR8* szDataNow);

/******************************************************************************
摘要: 验证诊断证书有效期

参数: cert[in]              --待验证证书
      len[in]              --待验证证书长度
      szDataNow[in]       --当前日期”YYYYMMDD”格式的字符串

返回值：0         --证书校验通过，有效期在当前日期之前，已过期
        1         --证书校验通过，且未过期
        0x04      --传入空指针
        0x08      --证书签名校验失败
	 0x1A      --证书格式非法
        0x18      --算法不支持
        0x1A      --证书过期
        0x1B      --未调用算法库初始化接口或未指定IO操作回调方法       
        0x1C      --读缓存数据失败
******************************************************************************/
UINT32 VssVerifyToolCert(UINT8* cert, UINT32 len, CHAR8* szDataNow);

/******************************************************************************
摘要: 产生会话密钥并存储

参数: M1[in]               --共享密钥，定长32字节
     r1[in]                --客户端随机数，定长32字节
     r2[in]                --服务器随机数，定长32字节

返回值：0         --成功
        0x04      --传入空指针
        0x18      --算法不支持
        0x1B      --未调用算法库初始化接口或未指定IO操作回调方法  
        0x1D      --写缓存数据失败
******************************************************************************/
UINT32 VssGenSessionKey(UINT8* M1, UINT8* r1, UINT8* r2);

/******************************************************************************
摘要: 重置会话密钥

参数: 无

返回值：0         --成功
        0x18      --算法不支持
        0x1B      --未调用算法库初始化接口或未指定IO操作回调方法  
        0x1D      --写缓存数据失败
******************************************************************************/
UINT32 VssResetSessionKey(void);

/******************************************************************************
摘要: 产生证书请求，算法由系统算法标识指定

参数: ecuType[in]            --ecu类型，1字节
VIN [in]                  --车辆识别号，17字节
     info[in]                   --证书识别信息，16字节
     pk[out]                  --密钥对，64字节（X+Y）
     sig[out]                 --申请证书用签名，64字节

返回值：0         --成功
        0x04      --传入空指针
        0x08      --计算失败
        0x18      --算法不支持
        0x1B      --未调用算法库初始化接口或未指定IO操作回调方法       
        0x1C      --读缓存数据失败
        0x1D      --写缓存数据失败
******************************************************************************/
UINT32 VssGenCertReq(UINT8 ecuType, CHAR8* VIN, CHAR8* info, UINT8* pk, UINT8* sig);

/******************************************************************************
摘要: 安全通道-对称加解密运算，具体算法根据CryptoInit的alg参数指定

参数: in[in]         --待运算数据
      inLen[in]      --待运算数据长度
      calcFlag[in]   --加解密标识：0-加密；1-解密
      padding[in]   --补位标识：0-不强制补位；1-强制补位
      lastKey[in]    --是否使用备份的密钥：0-使用当前密钥；1-使用备份密钥
      out[out]      --加密后数据
      pOutLen[out]  --加密后数据长度

返回值：0         --成功
        0x04      --传入空指针或者加解密标识、补位标识、备份密钥标识值非法
        0x05      --指定密钥不存在
        0x18      --算法不支持
        0x1B      --未调用算法库初始化接口或未指定IO操作回调方法       
        0x1C      --读缓存数据失败
******************************************************************************/
UINT32 VssStSymmCalc(UINT8* in, UINT32 inLen, UINT32 calcFlag, UINT32 padding, UINT32 lastKey, UINT8* out, UINT32* pOutLen);

/******************************************************************************
摘要: 数据签名

参数: data[in]             --运算数据
     dataLen[in]          --运算数据长度
     out[out]             --签名结果
     pOutLen[out]        --结果长度

返回值：0         --成功
        0x04      --传入空指针
        0x06      --未生成密钥对
        0x08      --签名计算错误
        0x18      --算法不支持
        0x1B      --未调用算法库初始化接口或未指定IO操作回调方法       
        0x1C      --读缓存数据失败
******************************************************************************/
UINT32 VssSignData(UINT8* data, UINT32 dataLen, UINT8* out, UINT32* pOutLen);

/********************************************************************************
摘要: 计算安全握手校验值
参数: R1[in]            --R1数据，33字节
     R2[in]            --R2数据，33字节
     M1[in]           --M1数据，32字节
     S1[in]            --S1数据，64字节
     E1[in]            --E1数据，M1的非对称加密数据
     E1Len[in]        --E1数据长度
     KeyWord[in]      --计算F1用”SERVER”；计算F2用”CLIENT”
     siteCert[in]        --服务器证书数据，证书定长176字节
     siteLen[in]         --服务器证书长度，应为176
     vehicleCert[in]     --车辆证书数据，证书定长176字节
     vehicleLen[in]     --服务器证书长度，应为176
	hmac[out]        --输出F1或F2的数据，定长32字节

返回值：0         --成功
        0x04      --传入空指针
        0x0B      --keyWord未传入指定值
        0x12      --证书长度不是176
        0x18      --算法不支持
        0x1B      --未调用算法库初始化接口
********************************************************************************/
UINT32 VssCalcFinishHmac(UINT8* R1, UINT8* R2, UINT8* M1, UINT8* S1,
UINT8* E1, UINT32 E1Len, CHAR8* KeyWord , UINT8* siteCert, UINT32 siteLen,
UINT8* vehicleCert, UINT32 vehicleLen, UINT8* hmac);

/******************************************************************************
摘要: 固件文件签名验证

参数: szEcuFileName [in]   --固件文件路径名称

返回值：0         --成功
        0x04      --传入空指针
        0x08      --验签失败
        0x0B      --文件不存在或无法读取数据
	 0x1A      --证书格式非法
        0x18      --算法不支持
        0x1B      --未调用算法库初始化接口或未指定IO操作回调方法       
        0x1C      --读缓存数据失败
******************************************************************************/
UINT32 VssVerifyEcuSign(CHAR8* szEcuFileName);

/******************************************************************************
摘要: 固件文件加解密

参数: szSrcEcuFile [in]   --源固件原文件路径名称
     szDestEcuFile [in]  --目标固件文件路径名称
     calcFlag[in]       --运算标识: 0-加密；1-解密
     key[in]           --运算密钥明文，定长16字节
     srcOffset[in]	   --源固件原文件数据偏移量

返回值：0         --成功
        0x04      --传入空指针或运算标识非法
        0x0B      --文件不存在或无法读取数据或数据偏移量越界
        0x18      --算法不支持
        0x1B      --未调用算法库初始化接口
******************************************************************************/
UINT32 VssCalcEcu(CHAR8* szSrcEcuFile, CHAR8* szDestEcuFile, UINT32 calcFlag, UINT8* key,  UINT32 srcOffset);

/********************************************************************************
摘要: 获取芯片号
参数: szKeyX[out]      --芯片的公钥X，定长32字节
	szKeyY[out]      --芯片的公钥Y，定长32字节
	szChipCode[out]  --定长12字节

返回值：0         --成功
        0x06      --密钥不合法
        0x10      --读取OTP失败
        0xE1      --参数为空
        0xE4      --通信失败
        0xE5      --消息校验失败
        0xE6      --消息体长度错误
********************************************************************************/
UINT32 VssGetChipID(UINT8 * szKeyX, UINT8 * szKeyY, UINT8* szChipCode);

/********************************************************************************
摘要: 更新芯片主控密钥KMC
参数:szMkey[in]   --新的KMC密钥密文，定长16字节
	szMac[in]    --密钥校验MAC，定长8字节
	szCV[in]     --新的KMC密钥校验值，定长3字节

返回值：0         --成功
        0x06      --密钥不合法
        0x08      --计算失败
        0x09      --FLASH校验失败
        0x0B      --数据不合法        
        0xE1      --参数为空
        0xE4      --通信失败
        0xE5      --消息校验失败
        0xE6      --消息体长度错误
********************************************************************************/
UINT32 VssUpdateMasterKey(UINT8* szMkey, UINT8* szMac, UINT8* szCV);

/********************************************************************************
摘要: 写入数据，芯片内有效存储空间为0-280000，非芯片环境由各控制器的flash_io_cb实现中控制大小
参数: offset[in]       --地址偏移量
	dataLen[in]     --数据长度
	data[in]        --待写入数据

返回值：0         --成功
        0x04      --传入空指针
        0x09      --FLASH校验失败
        0x0B      --数据不合法，offset和dataLen不在有效地址范围内 
        0x1B      --未调用算法库初始化接口或未指定IO操作回调方法       
        0xE1      --参数为空
        0xE4      --通信失败
        0xE5      --消息校验失败
        0xE6      --消息体长度错误
********************************************************************************/
UINT32 VssChipWrite(UINT32 offset, UINT32 dataLen, UINT8* data);

/********************************************************************************
摘要: 读取数据，芯片内有效存储空间为0-280000，非芯片环境由各控制器的flash_io_cb实现中控制大小

参数: offset[in]       --地址偏移量
	dataLen[in]     --数据长度
	data[out]        --输出数据
返回值：0         --成功
        0x04      --传入空指针
        0x09      --FLASH校验失败
        0x0B      --数据不合法，offset和dataLen不在有效地址范围内
        0x1B      --未调用算法库初始化接口或未指定IO操作回调方法        
        0xE1      --参数为空
        0xE4      --通信失败
        0xE5      --消息校验失败
        0xE6      --消息体长度错误
********************************************************************************/
UINT32 VssChipRead(UINT32 offset, UINT32 dataLen, UINT8* data);

/******************************************************************************
摘要:非对称加解密接口

参数: szInData[in]      --输入数据
      nInLen[in]       --输入数据长度
      calcFlag[in]      --运算标识: 0-加密；1-解密  
      szKey[in]        --运算密钥：如果是加密运算，该值为加密X||加密Y;
	      	  	  	  	  	 如果是解密运算，该值为解密SK
      nKeyLen[in]       --运算密钥长度，加密为64，解密为32
      szOutData[out]    --输出运算结果
      pOutLen[out]      --输出结果长度

返回值：0         --成功
        0x04      --传入空指针或加解密标识非法
        0x08      --计算错误
        0x12      --数据长度非法
        0x18      --算法不支持
        0x19      --密钥长度非法
        0x1B      --未调用算法库初始化接口
******************************************************************************/
UINT32 VssAsymmCalc(UINT8* szInData, UINT32 nInLen, UINT32 calcFlag, UINT8 *szKey, UINT32 nKeyLen, UINT8 *szOutData, UINT32* pOutLen);

/******************************************************************************
摘要:非对称加解密接口

参数: szInData[in]      --输入数据
      nInLen[in]       --输入数据长度
      calcFlag[in]      --运算标识: 0-加密；1-解密  
      szOutData[out]    --输出运算结果
      pOutLen[out]      --输出结果长度

返回值：0         --成功
        0x04      --传入空指针或加解密标识非法
        0x05      --密钥不存在
        0x08      --计算错误
        0x12      --数据长度非法
        0x18      --算法不支持
        0x1B      --未调用算法库初始化接口或未指定IO操作回调方法       
        0x1C      --读缓存数据失败
******************************************************************************/
UINT32 VssAsymmCalcIndex(UINT8* szInData, UINT32 nInLen, UINT32 calcFlag, UINT8 *szOutData, UINT32* pOutLen);

/******************************************************************************
摘要: 数据签名

参数:  key[in]              --私钥   
      keyLen[in]          --签名密钥长度，定长32字节
data[in]             --运算数据
     dataLen[in]          --运算数据长度，不哈希直接签名时指定32，哈希签名时数据长度大于0
hashFlag[in]          --哈希标识: 0-不哈希直接签名; 1-先哈希再签名
      sig[out]             --签名结果，定长64字节

返回值：0         --成功
        0x04      --传入空指针或哈希标识非法
        0x08      --计算错误
        0x12      --数据长度非法
        0x18      --算法不支持
******************************************************************************/
UINT32 VssSign(UINT8* key, UINT32 keyLen,UINT8* data, UINT32 dataLen, UINT8 hashFlag, UINT8* sig);

/******************************************************************************
摘要: 数据签名（内部密钥）

参数: data[in]             --运算数据
     dataLen[in]          --运算数据长度，不哈希直接签名时指定32，哈希签名时数据长度大于0
     hashFlag[in]         --哈希标识: 0-不哈希直接签名; 1-先哈希再签名
     sig[out]             --签名结果，定长64字节

返回值：0         --成功
        0x04      --传入空指针或哈希标识非法
        0x05      --密钥不存在
        0x08      --计算错误
        0x12      --数据长度非法
        0x18      --算法不支持
        0x1B      --未调用算法库初始化接口或未指定IO操作回调方法       
        0x1C      --读缓存数据失败
******************************************************************************/
UINT32 VssSignIndex(UINT8* data, UINT32 dataLen, UINT8 hashFlag, UINT8* sig);

/******************************************************************************
摘要: 验证签名

参数: pk[in]              --验证签名公钥，定长64字节
     data[in]             --运算数据
     dataLen[in]          --运算数据长度，不哈希直接签名时指定32，哈希签名时数据长度大于0
     hashFlag[in]         --哈希标识: 0-不哈希直接签名; 1-先哈希再签名
     sig[in]              --签名结果，定长64字节

返回值：0         --成功
        0x04      --传入空指针或哈希标识非法
        0x08      --验签失败
        0x12      --数据长度非法
        0x18      --算法不支持
******************************************************************************/
UINT32 VssSignVerify(UINT8* pk, UINT8* data, UINT32 dataLen, UINT8 hashFlag, UINT8* sig);

/******************************************************************************
摘要: 对称算法数据运算

参数:  in[in]         --待运算数据
      inLen[in]      --待运算数据长度
      key[in]        --密钥
      keyLen[in]    --密钥长度，定长16
      calcFlag[in]   --加解密标识：0-加密；1-解密
      padding[in]   --补位标识：0-不强制补位；1-强制补位
      out[out]      --加密后数据
      pOutLen[out]  --加密后数据长度

返回值：0         --成功
        0x04      --传入空指针或加解密标识、补位标识非法
        0x18      --算法不支持
        0x19      --密钥长度非法
******************************************************************************/
UINT32 VssSymmCalc(UINT8* in, UINT32 inLen, UINT8 *key, UINT32 keyLen, UINT32 calcFlag, UINT32 padding, UINT8* out, UINT32* pOutLen);

/******************************************************************************
摘要: 对称算法数据运算

参数:  index[in]     --密钥索引，指定0-13
in[in]         --待运算数据
      inLen[in]      --待运算数据长度
      calcFlag[in]   --加解密标识：0-加密；1-解密
      padding[in]   --补位标识：0-不强制补位；1-强制补位
      out[out]      --加密后数据
      pOutLen[out]  --加密后数据长度

返回值：0         --成功
        0x04      --传入空指针或加解密标识、补位标识非法
        0x05      --密钥不存在
        0x0F      --密钥索引非法，不为0-13
        0x18      --算法不支持
        0x19      --密钥长度不为2，4，8，12，16字节
        0x1B      --未调用算法库初始化接口或未指定IO操作回调方法       
        0x1C      --读缓存数据失败
******************************************************************************/
UINT32 VssSymmCalcIndex(UINT32 index, UINT8* in, UINT32 inLen, UINT32 calcFlag, UINT32 padding, UINT8* out, UINT32* pOutLen);

/******************************************************************************
摘要: 计算MAC，初始化向量为全0，对原文数据强制补位0x8000...，执行对称CBC计算，取最后16字节为MAC结果值

参数: in[in]         --待运算数据
     inLen[in]      --待运算数据长度
key[in]      --密钥
      keyLen[in]   --密钥长度，定长16
      out[out]      --mac结果，定长16字节

返回值：0         --成功
        0x04      --传入空指针
        0x18      --算法不支持
        0x19      --密钥长度不为16
******************************************************************************/
UINT32 VssMac(UINT8* in, UINT32 inLen, UINT8 *key, UINT32 keyLen, UINT8* out);

/******************************************************************************
摘要: 计算CMAC

参数: in[in]         --待运算数据
      inLen[in]      --待运算数据长度
      key[in]      --密钥
      keyLen[in]   --密钥长度，定长16
      out[out]      --mac结果，定长16字节

返回值：0         --成功
        0x04      --传入空指针
        0x18      --算法不支持
        0x19      --密钥长度不为16
******************************************************************************/
UINT32 VssCMac(UINT8* in, UINT32 inLen, UINT8 *key, UINT32 keyLen, UINT8* out);

/******************************************************************************
摘要:计算CMAC 

参数: in[in]         --待运算数据
      inLen[in]      --待运算数据长度
      index[in]      --密钥索引，指定0-13
      out[out]      --mac结果，定长16字节

返回值：0         --成功
        0x04      --传入空指针
        0x05      --指定密钥不存在
        0x0F      --密钥索引非法，不为0-13
        0x18      --算法不支持
******************************************************************************/
UINT32 VssCMacIndex(UINT8* in, UINT32 inLen, UINT32 index, UINT8* out);

/******************************************************************************
摘要: FTLS上下文初始化接口

参数: ctx[in]        --上下文数据指针
      sock[in]      --通信的SOCKET句柄
      sk[in]        --私钥，如果该值为空，则表示私钥在芯片内部，需要调用芯片接口
      sklen[in]      --私钥长度，定长32，如果该值为0，则表示私钥在芯片内部，需要调用芯片接口
      cert[in]       --客户端证书，如果该值为空，则表示私钥在芯片内部，需要调用芯片接口
      certlen[in]     --客户端证书长度，定长176，如果该值为0，则表示证书在芯片内部，需要调用芯片接口
      rcert[in]       --根证书，如果该值为空，则表示私钥在芯片内部，需要调用芯片接口
      rcertlen[in]    --根证书长度，定长144，如果该值为0，则表示证书在芯片内部，需要调用芯片接口
     someipCb[in]   --SOMEIP的收发回调函数，如果该参数为NULL，表示调用本地私钥签名，如果该回调函数不为空，则需要通过该回调函数，通过SOMEIP访问ICC上的私钥进行远程签名。

返回值：0         --成功
        0x04      --传入空指针
        0x0B      --各数据长度不是指定值
        0x18      --算法不支持
        0x1B      --未调用算法库初始化接口或未指定IO操作回调方法
	 0xE4      --接收数据失败
        0xE2      --发送数据失败
        0xE3      --通信超时
******************************************************************************/
UINT32 FTLS_ctx_init(FTLS_CTX* ctx, UINT32 sock, UINT8* sk, UINT32 sklen, UINT8* cert, UINT32 certlen, UINT8* rcert, UINT32 rcertlen, someip_io_cb* someipCb);

/******************************************************************************
摘要: FTLS安全通讯握手接口

参数: ctx[in]         --上下文数据指针      

返回值：0         --成功
        0x04      --传入空指针
        0x08      --计算错误
        0x0B      --证书数据格式错误
        0x12      --预置错误的根证书数据
        0x18      --算法不支持
        0x1B      --未调用算法库初始化接口或未指定IO操作回调方法       
        0x1C      --读缓存数据失败
	 0xE4      --接收数据失败
        0xE2      --发送数据失败
        0xE3      --通信超时
******************************************************************************/
UINT32 FTLS_connect(FTLS_CTX* ctx);

/******************************************************************************
摘要: FTLS安全数据发送接口

参数: ctx[in]         --上下文数据指针      
      data[in]       --待发送的明文数据
      len[in]        --待发送的数据长度

返回值：0         --成功
        0x04      --传入空指针
        0x08      --计算错误
        0x18      --算法不支持
	 0xE4      --接收数据失败
        0xE2      --发送数据失败
        0xE3      --通信超时
******************************************************************************/
UINT32 FTLS_write(FTLS_CTX* ctx, UINT8* data, UINT32 len);

/******************************************************************************
摘要: FTLS安全数据接收接口

参数: ctx[in]         --上下文数据指针      
      data[in]       --待接收的明文数据缓冲区
      len[out]        --待接收的数据长度

返回值：0         --成功
        0x04      --传入空指针
        0x08      --计算错误
        0x18      --算法不支持
	 0xE4      --接收数据失败
        0xE2      --发送数据失败
        0xE3      --通信超时
******************************************************************************/
UINT32 FTLS_read(FTLS_CTX* ctx, UINT8* data, UINT32* len);

/******************************************************************************
摘要: 写入码单写入确认标志位，自动置1

参数: 无

返回值：0       --成功
        0x1B    --未调用算法库初始化接口或未指定IO操作回调方法
        0x1D    --写缓存数据失败
******************************************************************************/
UINT32 VssSetWroteFlag();

/******************************************************************************
摘要: 读取码单写入确认标志位

参数: wroteFlag[out]  --返回wroteFlag值，0-码单未写入；1-码单已写入

返回值：0       --成功
        0x04    --传入空指针
        0x1B    --未调用算法库初始化接口或未指定IO操作回调方法
        0x1C    --读缓存数据失败
******************************************************************************/
UINT32 VssGetWroteFlag(UINT8* wroteFlag);

/******************************************************************************
摘要: 随机生成非对称密钥对并导出接口

参数: szX[out]      --公钥X（定长32字节）
      szY[out]      --公钥Y（定长32字节）
      szSK[out]     --私钥SK（定长32字节）

返回值：0       --成功
        0x04    --传入空指针
        0x08    --计算失败
        0x18    --算法不支持
******************************************************************************/
UINT32 VssAsymGenKey(UINT8 *szX, UINT8 *szY, UINT8 *szSK);

/******************************************************************************
摘要: 随机生成非对称密钥对并存储接口

参数: szX[out]      --公钥X（定长32字节）
      szY[out]      --公钥Y（定长32字节）

返回值：0       --成功
        0x04    --szX或szY传入空指针
        0x08    --计算失败
        0x1B    --未调用算法库初始化接口或未指定IO操作回调方法
        0x1D    --写缓存数据失败
******************************************************************************/
UINT32 VssAsymGenKeyIndex(UINT8 *szX, UINT8 *szY);

/******************************************************************************
摘要: 读取9-13号备份密钥明文

参数: index[in]    --密钥索引，有效索引为9-13
    nKeyLen[out]  --密钥的长度
    szKey[out]    --密钥值

返回值：0        --成功
        0x04     --密钥或密钥长度传入空指针
        0x05     --指定密钥不存在
        0x0F     --索引值非法，不为9-13
        0x1B      --未调用算法库初始化接口或未指定IO操作回调方法
        0x1C      --读缓存数据失败
******************************************************************************/
UINT32 VssExportKey(UINT32 index, UINT32* nKeyLen, UINT8* szKey);

/******************************************************************************
摘要: 根据环境非对称密钥对并导出接口

参数: env[in]      --环境ID：1-测试环境；2-预生产环境；3-生产环境

返回值：0       --成功
        0x04    --传入空指针
        0x1B    --未调用算法库初始化接口或未指定IO操作回调方法
        0x1D    --写缓存数据失败
******************************************************************************/
UINT32 VssUpdateEnvironment(UINT32 env);

/******************************************************************************
摘要: SOME/IP消息处理接口

参数: inMsg[in]         --收到的SOME/IP请求报文      
      inlen[in]         --请求报文长度
      outMsg[out]      --处理后的回执报文
      outlen[out]       --回执报文长度

返回值：0         --成功
        0x04      --传入空指针
        0x08      --计算错误
        0x18      --算法不支持
******************************************************************************/
UINT32 VssSomeipMsgProcess(UINT8* inMsg, UINT32 inlen, UINT8* outMsg, UINT32* outlen);

/******************************************************************************
摘要: 根据环境非对称密钥对并导出接口

参数: env[out]      --环境ID：1-测试环境；2-预生产环境；3-生产环境

返回值：0       --成功
        0x04    --传入空指针
        0x1B    --未调用算法库初始化接口或未指定IO操作回调方法
        0x1C    --读缓存数据失败
******************************************************************************/
UINT32 VssGetEnvironment(UINT8* env);

/******************************************************************************
摘要: 设置算法标识

参数: nAlgFlag[in]    --算法标识: 1-国际算法；2-国密算法
                     
返回值：0        --成功
        0x04     --传入空指针
        0x1B      --未调用算法库初始化接口或未指定IO操作回调方法
        0x1D      --写缓存数据失败
******************************************************************************/
UINT32 VssSetAlgFlag(UINT8 nAlgFlag);

#ifdef __cplusplus
}
#endif
#endif


